# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

stages:          # List of stages for jobs, and their order of execution
  - build
  - lint
  - test
  - deploy
  - cleanup


build-job:       # This job runs in the build stage, which runs first.
  stage: build
  tags:
    - shell
  script:
    - echo "Compiling the code..."
    - echo "Compile complete."

pylint:
  stage: lint
  tags:
    - shell
  before_script:
    - python -m pip install --upgrade pip
    - pip install pylint
  script:
    - pylint --max-line-length=150 --disable=E0611,C0116 autoscript_kernel  > pylint-report.txt
  allow_failure: true  # 设置为 false，如果您希望 lint 失败时停止整个 CI/CD 流程
  artifacts:
    reports:
      codequality: pylint-report.txt

run_unittests:
  stage: test
  tags:
    - shell
  before_script:
    - python -V
    - $env:PYTHONPATH = "$($env:PYTHONPATH);$($env:CI_PROJECT_DIR)"
    - echo $env:PYTHONPATH
  script:
    - python -m unittest discover -s unit_tests -p "test*.py"


deploy-job:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  tags:
    - shell
  environment: production
  script:
    - echo "Deploying application..."
    - echo "Application successfully deployed."

cleanup_pyc:
  stage: cleanup
  tags:
    - shell
  script:
    - Get-ChildItem -Path . -Filter *.pyc -Recurse -File | Remove-Item -Force